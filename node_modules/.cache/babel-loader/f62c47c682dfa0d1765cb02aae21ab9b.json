{"ast":null,"code":"var _jsxFileName = \"/Users/rohanchauhan/Downloads/Internship assignment/react-coding-challenges/chatter/src/components/Messages/components/Messages.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useContext, useEffect, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport useSound from \"use-sound\";\nimport config from \"../../../config\";\nimport LatestMessagesContext from \"../../../contexts/LatestMessages/LatestMessages\";\nimport TypingMessage from \"./TypingMessage\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Message from \"./Message\";\nimport \"../styles/_messages.scss\";\nimport initialBottyMessage from \"../../../common/constants/initialBottyMessage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(config.BOT_SERVER_ENDPOINT, {\n  transports: [\"websocket\", \"polling\", \"flashsocket\"]\n});\n\nfunction Messages() {\n  _s();\n\n  const [playSend] = useSound(config.SEND_AUDIO_URL);\n  const [playReceive] = useSound(config.RECEIVE_AUDIO_URL);\n  const {\n    setLatestMessage\n  } = useContext(LatestMessagesContext);\n  const [message, setMessage] = useState(\"\");\n  const [chat, setChat] = useState([{\n    message: initialBottyMessage\n  }]);\n  const [isTyping, setIsTyping] = useState(false);\n  const onChangeMessage = useCallback(e => {\n    setMessage(e.target.value);\n  }, []);\n  const sendMessage = useCallback(() => {\n    setMessage(\"\");\n    setChat([...chat, {\n      user: \"me\",\n      message\n    }]);\n    playSend();\n    socket.emit(\"user-message\", message);\n  }, [message]);\n  const incomingBottyReply = useCallback(newMessage => {\n    setIsTyping(false);\n    setChat([...chat, {\n      user: \"bot\",\n      message: newMessage\n    }]);\n    setLatestMessage(\"bot\", newMessage);\n    playReceive();\n  }, [chat]);\n  useEffect(() => {\n    socket.on(\"bot-typing\", () => setIsTyping(true));\n  }, []);\n  useEffect(() => {\n    socket.on(\"bot-message\", incomingBottyReply);\n  }, [handleBottyReply, chat, isTyping]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"messages\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages__list\",\n      id: \"message-list\",\n      children: [chat.map(message => /*#__PURE__*/_jsxDEV(Message, {\n        message: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this)), isTyping && /*#__PURE__*/_jsxDEV(TypingMessage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {\n      message: message,\n      sendMessage: sendMessage,\n      onChangeMessage: onChangeMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Messages, \"cz4qdAsAQHn/FiYnxz/9FLov5vE=\", false, function () {\n  return [useSound, useSound];\n});\n\n_c = Messages;\nexport default Messages;\n\nvar _c;\n\n$RefreshReg$(_c, \"Messages\");","map":{"version":3,"sources":["/Users/rohanchauhan/Downloads/Internship assignment/react-coding-challenges/chatter/src/components/Messages/components/Messages.js"],"names":["React","useCallback","useContext","useEffect","useState","io","useSound","config","LatestMessagesContext","TypingMessage","Header","Footer","Message","initialBottyMessage","socket","BOT_SERVER_ENDPOINT","transports","Messages","playSend","SEND_AUDIO_URL","playReceive","RECEIVE_AUDIO_URL","setLatestMessage","message","setMessage","chat","setChat","isTyping","setIsTyping","onChangeMessage","e","target","value","sendMessage","user","emit","incomingBottyReply","newMessage","on","handleBottyReply","map"],"mappings":"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","sourcesContent":["import React, { useCallback, useContext, useEffect, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport useSound from \"use-sound\";\nimport config from \"../../../config\";\nimport LatestMessagesContext from \"../../../contexts/LatestMessages/LatestMessages\";\nimport TypingMessage from \"./TypingMessage\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Message from \"./Message\";\nimport \"../styles/_messages.scss\";\nimport initialBottyMessage from \"../../../common/constants/initialBottyMessage\";\n\nconst socket = io(config.BOT_SERVER_ENDPOINT, {\n  transports: [\"websocket\", \"polling\", \"flashsocket\"],\n});\n\nfunction Messages() {\n  const [playSend] = useSound(config.SEND_AUDIO_URL);\n  const [playReceive] = useSound(config.RECEIVE_AUDIO_URL);\n  const { setLatestMessage } = useContext(LatestMessagesContext);\n  const [message, setMessage] = useState(\"\");\n  const [chat, setChat] = useState([{ message: initialBottyMessage }]);\n  const [isTyping, setIsTyping] = useState(false);\n\n  const onChangeMessage = useCallback((e) => {\n    setMessage(e.target.value);\n  }, []);\n\n  const sendMessage = useCallback(() => {\n    setMessage(\"\");\n    setChat([...chat, { user: \"me\", message }]);\n    playSend();\n    socket.emit(\"user-message\", message);\n  }, [message]);\n\n  const incomingBottyReply = useCallback(\n    (newMessage) => {\n      setIsTyping(false);\n      setChat([...chat, { user: \"bot\", message: newMessage }]);\n      setLatestMessage(\"bot\", newMessage);\n      playReceive();\n    },\n    [chat]\n  );\n\n  useEffect(() => {\n    socket.on(\"bot-typing\", () => setIsTyping(true));\n  }, []);\n\n  useEffect(() => {\n    socket.on(\"bot-message\", incomingBottyReply);\n  }, [handleBottyReply, chat, isTyping]);\n\n  return (\n    <div className=\"messages\">\n      <Header />\n      <div className=\"messages__list\" id=\"message-list\">\n        {chat.map((message) => (\n          <Message message={message} />\n        ))}\n        {isTyping && <TypingMessage />}\n      </div>\n      <Footer\n        message={message}\n        sendMessage={sendMessage}\n        onChangeMessage={onChangeMessage}\n      />\n    </div>\n  );\n}\n\nexport default Messages;\n"]},"metadata":{},"sourceType":"module"}